<?php

/**
 * @file
 * The Social event module.
 */

use Drupal\node\Entity\Node;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements hook_form_form_ID_alter().
 *
 * Enhance the exposed filter form of the event overview.
 */
function social_event_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form['#id'] === 'views-exposed-form-events-events-overview') {
    $account_uid = \Drupal::routeMatch()->getParameter('user');
    $current_uid = \Drupal::currentUser()->id();

    if ($account_uid !== $current_uid) {
      $form['status']['#access'] = FALSE;
    }

    // Enable the reset button.
    // @todo make sure the block content refreshes on submit as well (AJAX).
    $form['actions']['reset']['#access'] = TRUE;
    // @todo make sure exposed form filtering redirects to the proper view
    // page, when views is updated.
    $form['#action'] = '/user/' . $account_uid . '/events';
  }
}

/**
 * Implements hook_block_view_alter().
 *
 * Add a title to the exposed filter block on the events overview.
 */
function social_event_block_view_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
  // @todo check out why this happens, is this is a views bug?
  if ($build['#plugin_id'] === 'views_exposed_filter_block:events-events_overview') {
    $build['#configuration']['label'] = $build['#configuration']['views_label'];
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function social_event_menu_local_tasks_alter(&$data, $route_name) {
  $can_show_enrollments_link = FALSE;
  if ($route_name === "view.event_enrollments.view_enrollments" || $route_name === 'entity.node.canonical') {
    $node = \Drupal::service('current_route_match')->getParameter('node');
    if (!is_null($node) && !is_object($node)) {
      $node = Node::load($node);
    }
    if (is_object($node) && $node->getType() === 'event') {
      $can_show_enrollments_link = TRUE;
    }

    if (!$can_show_enrollments_link) {
      unset($data['tabs'][0]['views_view:view.event_enrollments.view_enrollments']);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function social_event_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->getType() === 'event' && ($display->getMode() === 'teaser' || $display->getMode() === 'small_teaser')) {
    $current_user = \Drupal::currentUser();
    $uid = $current_user->id();
    $nid = $entity->id();

    // Create our custom enrollment tag so we can also invalidate f.e. teasers
    // cache when people enrol. See EnrollActionForm->submitForm().
    $enrollmenttag = 'enrollment:' . $nid . '-' . $uid;
    $build['#cache']['tags'][] = $enrollmenttag;

    $conditions = array(
      'field_account' => $uid,
      'field_event' => $nid,
    );

    $enrollments = \Drupal::service('entity.manager')
      ->getStorage('event_enrollment')
      ->loadByProperties($conditions);
    // Redirect anonymous use to login page before enrolling to an event.
    if ($enrollment = array_pop($enrollments)) {
      $current_enrollment_status = $enrollment->field_enrollment_status->value;
      if ($current_enrollment_status === '1') {
        $build['enrolled'] = array(
          '#type' => '#text_field',
          '#markup' => 'Enrolled',
        );
      }
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function social_event_views_data_alter(array &$data) {
  $data['node']['event_enrolled_or_created_filter'] = array(
    'title' => t('Event enrolled or created'),
    'filter' => array(
      'title' => t('Event enrolled or created'),
      'help' => t('Enable events for on the user profles.'),
      'field' => 'field_event',
      'id' => 'event_enrolled_or_created',
    ),
  );
}
